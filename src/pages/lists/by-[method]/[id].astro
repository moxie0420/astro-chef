---
import { actions } from "astro:actions";

import DefaultImage from "@components/assets/defaultImage.astro";
import Layout from "@layouts/layout.astro";
import Markdown from "@components/markdown.astro";
import RecipeCard from "@components/recipe/recipeCard.astro";

const { method, id } = Astro.params;

if (!method || !id) return Astro.redirect("/404");

const { data, error } = await Astro.callAction(actions.list.getList, {
  method,
  id,
});

if (!data) return Astro.redirect("/404");

const list = data[0];

const ids: number[] = JSON.parse(list.recipes as string);

console.log(ids);

const res = await Astro.callAction(actions.list.getRecipes, {
  ids,
});
const recipes = res.data;
---

<Layout title={list.name}>
  <div class="flex flex-col gap-2 p-2 mx-auto rounded-lg">
    <div class="w-5/6 mx-auto bg-surface max-w-screen-2xl">
      <div class="pb-3 text-xl font-bold text-center md:text-4xl lg:text-5xl">
        {list.name}
      </div>
      <div class="grid grid-cols-2">
        <DefaultImage src={list.image} alt={list.imageAlt} />
        <Markdown body={list.description} />
      </div>
      <div
        class="grid grid-cols-2 gap-1 p-2 px-2 mx-auto rounded-lg md:grid-cols-3 lg:grid-cols-4 2xl:grid-cols-5 bg-overlay"
      >
        {
          recipes?.map((r) => (
            <recipe-holder
              class="relative"
              data-list-id={id}
              data-recipe-id={r.id}
            >
              <div id="delete" class="absolute z-10 top-1 right-3 text-overlay">
                ï‘§
              </div>
              <RecipeCard recipe={r} />
            </recipe-holder>
          ))
        }
      </div>
    </div>
  </div>
</Layout>

<script>
  import { actions } from "astro:actions";

  class recipe extends HTMLElement {
    connectedCallback() {
      const listId = this.dataset.listId as string;
      const recipeId = this.dataset.recipeId as string;

      this.querySelector("div[id=delete]")?.addEventListener(
        "click",
        async () => {
          await actions.list.removeRecipe({
            listId: parseInt(listId),
            recipeId: parseInt(recipeId),
          });
          location.reload();
        }
      );
    }
  }
  customElements.define("recipe-holder", recipe);
</script>
