---
import { actions } from "astro:actions";

import DefaultImage from "@components/assets/defaultImage.astro";
import Layout from "@layouts/layout.astro";
import Ingredients from "@components/ingredients/ingredients";
import Markdown from "@components/markdown";
import AvailibleImages from "@components/assets/availibleImages.astro";

const params = Astro.url.searchParams;

const id = params.get("id");
if (!id) return Astro.redirect("/404?message=Recipe came back undefined");

const { data, error } = await Astro.callAction(actions.Recipe.getRecipe, {
  method: "id",
  identifier: id,
});

if (error?.code) return Astro.redirect("/404?message=" + error?.message);
else if (error) return;

if (!data) return Astro.redirect("/404?message=Recipe came back undefined");
---

<Layout title={data.title} editing={true}>
  <editor-element
    data-recipe={id}
    class="w-full md:w-5/6 bg-surface mx-auto text-text"
  >
    <div class="grid w-full pb-3 grid-cols-2 mx-auto max-w-2xl">
      <input
        id="recipeTitle"
        slot="title"
        name="title"
        form="editor"
        type="text"
        class="w-full bg-surface col-span-2 md:text-3xl font-bold"
        placeholder="Recipe Title"
        value={data.title}
      />
      <DefaultImage
        src={data.image}
        alt={data.imageAlt}
        class:list={["col-span-2"]}
      />
      <input
        id="imageAlt"
        name="imageAlt"
        form="editor"
        type="text"
        class="bg-surface"
        placeholder="Image alt text"
        value={data.imageAlt}
      />
      <input
        id="imagePath"
        name="image"
        form="editor"
        type="text"
        class="bg-surface"
        placeholder="Image Source"
        value={data.image}
      />
    </div>

    <div class="w-fit mx-auto">
      <Ingredients recipeId={data.id} editing={true} client:only />
    </div>

    <div class="flex flex-col xl:flex-row gap-2 h-fit">
      <div class="max-w-sm p-2 mx-auto">
        <AvailibleImages />
      </div>

      <div class="w-full">
        <Markdown
          body={data.body || ""}
          editing={true}
          recipeId={data.id}
          client:load
        />
      </div>
    </div>
  </editor-element>
</Layout>

<script>
  import { actions } from "astro:actions";

  const event = new Event("save-data", {
    bubbles: false,
    cancelable: false,
    composed: false,
  });

  class Editor extends HTMLElement {
    recipe = parseInt(this.dataset.recipe!);
    editor = this.querySelector("textarea");
    imageAlt = this.querySelector("#imageAlt") as HTMLInputElement;
    image = this.querySelector("#imagePath") as HTMLInputElement;
    recipeTitle = this.querySelector("#recipeTitle") as HTMLInputElement;
    ingredients = this.querySelector("tbody");

    save() {
      if (this.ingredients) {
        this.ingredients.childNodes.forEach((child) => {
          child.dispatchEvent(event);
        });
      }

      actions.Recipe.updateRecipe({
        id: this.recipe,
        body: this.editor?.value,
        image: this.image?.value,
        imageAlt: this.imageAlt?.value,
        title: this.recipeTitle?.value,
      }).then(({ error, data }) => {
        if (error) console.error(error.message);
        if (data) console.log("saved");
      });
    }

    constructor() {
      super();
    }
  }
  customElements.define("editor-element", Editor);
</script>
