---
import { actions } from "astro:actions";
import type { filter_t, Recipe, sort_t } from "@lib/types";

import MainLayout from "@layouts/layout.astro";
import RecipeCard from "@components/recipe/recipeCard";
import SearchOptions from "@components/search/searchOptions";

const getData = async (
  search?: string,
  sort: "by-id" | "popular" | "random" | "title" = "popular",
  page: number = 1,
  number: number = 25,
  filter?: Array<filter_t>,
) => {
  return Astro.callAction(actions.Recipe.getRecipes, {
    page,
    number,
    filter,
    sort,
    query: search,
  }).then((res) => res);
};

let res;
let params: {
  search?: string;
  sortParam?: sort_t;
  page?: number;
  number?: number;
  filters?: Array<filter_t>;
} = {};

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();

    params.search = data.get("search") as string;
    params.sortParam = data.get("sortBy") as sort_t;
    const page = data.get("page") as string;
    const count = data.get("count") as string;

    params.filters = data.getAll("filters") as filter_t[] | undefined;

    params.page = page === "null" || page == null ? 1 : parseInt(page);
    params.number = count === "null" || count == null ? 25 : parseInt(count);

    res = await getData(
      params.search,
      params.sortParam,
      params.page,
      params.number,
      params.filters,
    );

    if (res.error || !res.data) throw res.error;
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
      return Astro.redirect("/404");
    }
  }
} else {
  try {
    res = await getData();
    if (res.error || !res.data) throw res.error;
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
      return Astro.redirect("/404");
    }
  }
}

if (!res?.data) return Astro.redirect("/404");
const recipes = res.data;
---

<MainLayout title={"Browse Recipes"}>
  <SearchOptions
    search={params.search}
    page={params.page || 1}
    number={params.number || 25}
    filter={params.filters}
    sort={params.sortParam || "popular"}
    client:load
  />

  <div class="mx-auto flex size-full flex-wrap">
    {
      recipes.map((r) => (
        <RecipeCard recipe={r as Recipe} client:load>
          <div slot="fallback" class="size-full animate-pulse" />
        </RecipeCard>
      ))
    }
  </div>

  <div class="m-2 mx-auto flex w-full justify-between">
    <button id="prevPage" class="bg-foam rounded-md px-2">Prev</button>
    <button id="nextPage" class="bg-foam rounded-md px-2">Next</button>
  </div>
</MainLayout>

<script>
  import { navigate } from "astro:transitions/client";

  const prevPage = document.getElementById("prevPage") as HTMLButtonElement;
  const nextPage = document.getElementById("nextPage") as HTMLButtonElement;

  const search = new URLSearchParams(window.location.search);
  const page = parseInt(search.get("page")!) || 1;

  const prev = page - 1 >= 1 ? page - 1 : 1;

  if (prevPage)
    prevPage.onclick = () => {
      search.set("page", `${prev}`);
      navigate(`/recipes${search.toString()}`);
    };

  if (nextPage)
    nextPage.onclick = () => {
      search.set("page", `${page + 1}`);
      navigate(`/recipes${search.toString()}`);
    };
</script>
