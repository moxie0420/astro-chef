---
import Button from "@components/generic/button.astro";
import { Units } from "@lib/types";
import { Icon } from "astro-icon/components";

interface Props {
  recipeId: number;
}

const { recipeId } = Astro.props;
---

<tr data-recipeid={recipeId} is="ingredient-adder" class="flex h-full">
  {/* amount */}
  <td>
    <input
      id="amnt"
      name="amnt"
      type="text"
      class="bg-surface w-full"
      placeholder="Amount"
    />
  </td>

  {/* unit */}
  <td>
    <select name="unit" id="unit" class="bg-surface w-full">
      <option selected> ----None---- </option>
      {Units.map((unit) => <option value={unit}>{unit}</option>)}
    </select>
  </td>

  {/* name */}
  <td>
    <input
      id="name"
      name="name"
      type="text"
      class="bg-surface text-text w-full"
      placeholder="Name"
      maxlength="25"
    />
  </td>

  <td>
    <div class="flex flex-col md:flex-row gap-1">
      {/* add button */}
      <Button id="addbtn" style="submit" size="small"
        ><Icon name="material-symbols:add-2-rounded" class="text-lg" /></Button
      >
      {/* clear button */}
      <Button id="clrbtn" style="cancel" size="small"
        ><Icon
          name="material-symbols:cancel-outline-rounded"
          class="text-lg"
        /></Button
      >
    </div>
  </td>
</tr>

<script>
  import { actions } from "astro:actions";
  import Fraction from "fraction.js";

  class IngredientAdder extends HTMLTableRowElement {
    connectedCallback() {
      const addbtn = this.querySelector("#addbtn") as HTMLButtonElement;
      addbtn?.addEventListener("click", async () => {
        const recipeId = parseInt(this.dataset.recipeid as string);

        const amnt = this.querySelector("#amnt") as HTMLInputElement;
        const unit = this.querySelector("#unit") as HTMLSelectElement;
        const name = this.querySelector("#name") as HTMLInputElement;

        console.log(`adding ${name.value}`);

        if (!amnt || amnt == null) return;

        const val = new Fraction(amnt.value);

        const { error } = await actions.ingredient.addIngredient({
          recipeId,
          fraction: val.toFraction(true),
          whole: val.valueOf(),
          unit: unit?.value,
          name: name?.value,
        });

        if (error) console.error(error.message);

        amnt.value = amnt.defaultValue;
        unit.selectedIndex = 0;
        name.value = name.defaultValue;

        location.reload();
      });

      const resetbtn = this.querySelector("#clrbtn") as HTMLButtonElement;
      resetbtn?.addEventListener("click", () => {
        const amnt = this.querySelector("#amnt") as HTMLInputElement;
        const unit = this.querySelector("#unit") as HTMLSelectElement;
        const name = this.querySelector("#name") as HTMLInputElement;

        amnt.value = amnt.defaultValue;
        unit.selectedIndex = 0;
        name.value = name.defaultValue;
      });
    }
  }

  customElements.define("ingredient-adder", IngredientAdder, { extends: "tr" });
</script>
