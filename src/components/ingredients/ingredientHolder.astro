---
import { actions } from "astro:actions";

import Ingredients from "./ingredients.astro";
import IngredientAdder from "./ingredientAdder.astro";

interface Props {
  recipeId: number;
  editing: boolean;
}

const { recipeId, editing } = Astro.props;

const { data } = await Astro.callAction(
  actions.ingredient.getIngredients,
  {
    recipeId: recipeId,
  },
);
---

<div
  class="bg-rosePine-surface size-fit table rounded-md border-2 border-rosePine-highlightHigh text-rosePine-text"
>
  {/* TODO: unit selector */}
  <div class="table-header-group">
    <div class="table-row 2xl:text-4xl font-bold ">
      
      {
        editing ? (
          <p class="table-cell border-b-2 border-rosePine-highlightHigh px-1">
            Amount
          </p>
          <p class="table-cell border-b-2 border-rosePine-highlightHigh px-1">
            Unit
          </p>
          <p class="table-cell border-b-2 border-rosePine-highlightHigh px-1">
            Name
          </p>
          <div class="table-cell border-b-2 border-rosePine-highlightHigh" />
          <div class="table-cell border-b-2 border-rosePine-highlightHigh" />
        ) : <span class="border-b-2 border-rosePine-highlightHigh table-cell pr-2">Ingredients</span>
      }
    </div>
  </div>
  <div class="table-row-group" id="ingredientRows">
    {
      data?.map((ingredient) => (
        <Ingredients
          editing={editing}
          id={ingredient.id}
          amount={ingredient.amount || ""}
          unit={ingredient.unit || ""}
          name={ingredient.name || ""}
        />
      ))
    }
    {editing ? <IngredientAdder recipeId={recipeId} /> : null}
  </div>
</div>
