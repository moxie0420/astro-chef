---
import type { HTMLAttributes } from "astro/types";
import Button from "@components/generic/button.astro";

import { Units, isMetric } from "@lib/types";
import { truncate } from "@lib/math";

interface Props extends HTMLAttributes<"tr"> {
  editing: boolean;
  name: string | null;
  unit: string;
  whole: number;
  fraction: string;
}

const props = Astro.props;
const { name, ...attrs } = props;

const amount = {
  whole: props.whole,
  fraction: props.fraction,
};
---

<tr is="ingredient-element" class="w-full" {...attrs}>
  {
    props.editing ? (
      <>
        <td>
          <input
            id="amount"
            type="text"
            class="w-full bg-surface"
            value={props.whole}
          />
        </td>
        <td>
          <select id="unit" class="w-full bg-surface">
            {Units.map((unit) => (
              <option value={unit} selected={props.unit === unit}>
                {unit}
              </option>
            ))}
          </select>
        </td>
        <td>
          <input id="name" type="text" class="w-full bg-surface" value={name} />
        </td>
        <td>
          <div class="flex-col md:flex-row w-full flex gap-1">
            <Button id="update" style="submit" size="small">
              
            </Button>
            <Button id="remove" style="cancel" size="small">
              󰆴
            </Button>
          </div>
        </td>
      </>
    ) : (
      <td class="table-cell px-2 text-left">{` ${isMetric.test(props.unit) ? truncate(amount.whole, 3) : amount.fraction} ${props.unit}${amount.whole > 1 ? "s" : ""} of ${props.name}`}</td>
    )
  }
</tr>

<script>
  import { actions } from "astro:actions";

  class Ingredient extends HTMLTableRowElement {
    getInputValues() {
      const amount = this.querySelector("#amount") as HTMLInputElement;
      const unit = this.querySelector("#unit") as HTMLInputElement;
      const name = this.querySelector("#name") as HTMLInputElement;

      return { amount: amount.value, unit: unit.value, name: name.value };
    }

    connectedCallback() {
      const id = this.id as string;
      const deletebutton = this.querySelector("#delete");

      deletebutton?.addEventListener("click", async () => {
        const { error } = await actions.ingredient.removeIngredient({
          ingredientId: parseInt(id),
        });
        if (error) console.log(error.message);
        else this.remove();
      });

      const updateButton = this.querySelector("#update");
      updateButton?.addEventListener("click", async () => {
        const { amount, unit, name } = this.getInputValues();
        const { error } = await actions.ingredient.updateIngredient({
          ingredientId: parseInt(id),
          amount,
          unit,
          name,
        });

        if (error) console.error(error.message);
        else console.log(`saved: ${name}`);
      });

      this.addEventListener(
        "save-data",
        async () => {
          const { amount, unit, name } = this.getInputValues();
          const { error } = await actions.ingredient.updateIngredient({
            ingredientId: parseInt(id),
            amount,
            unit,
            name,
          });

          if (error) console.error(error.message);
          else console.log(`saved: ${name}`);
        },
        {
          passive: true,
        }
      );
    }
  }

  customElements.define("ingredient-element", Ingredient, { extends: "tr" });
</script>
