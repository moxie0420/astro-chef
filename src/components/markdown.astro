---
import { genMd } from "@lib/markdown";

interface Props {
  name?: string;
  body: string | null;
  editing?: boolean;
}

const { body, editing = false, name = "body" } = Astro.props;
---

{
  editing ? (
    <div
      is="markdown-component"
      class="grid grid-row md:grid-cols-2  gap-1 p-1 border rounded-md bg-overlay selection:outline selection:outline-pine max-w-screen-xl mx-auto overflow-scroll h-screen"
    >
      <textarea
        id="text"
        name={name}
        class="prose resize prose-rosePine border-highlightHigh bg-overlay w-full"
        set:text={body}
      />
      <div
        id="preview"
        class="prose border-none resize prose-rosePine border-highlightHigh bg-overlay"
      />
    </div>
  ) : (
    <article
      set:html={await genMd(body || "")}
      class="p-2 pt-10 mx-auto prose-sm prose text-justify flex flex-col md:prose-lg 2xl:prose-2xl prose-rosePine bg-overlay rounded-md my-2 text-text text-pretty"
    />
  )
}

<script>
  import { Marked, type RendererObject } from "marked";

  class Markdown extends HTMLElement {
    input = this.querySelector("textarea") as HTMLTextAreaElement;
    preview = this.querySelector("#preview") as HTMLElement;

    renderer: RendererObject = {
      image({ href, text }) {
        return `<img src="/api/image?path=${href}" alt="${text}" />`;
      },
    };

    genCleanHtml = async (md: string) => await this.marked.parse(md);

    marked: Marked;

    constructor() {
      super();
      this.marked = new Marked({ renderer: this.renderer, async: true });

      if (!this.preview || !this.input) return;
      this.genCleanHtml(this.input.value).then(
        (res) => (this.preview.innerHTML = res)
      );

      this.input.addEventListener("input", async () => {
        if (this.preview && this.input)
          this.preview.innerHTML = await this.genCleanHtml(this.input.value);
      });
    }
  }

  customElements.define("markdown-component", Markdown);
</script>
